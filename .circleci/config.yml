version: 2.1
jobs:
  deploy:
    parameters:
      NoPromote:
        default: "--no-promote"
        type: string
      Version:
        default: ""
        type: string
        description: "add --version someVersionName if you want to assign a version"
      Stack:
        default: ${CIRCLE_BRANCH}
        type: string
    docker:
      - image: gcr.io/google-appengine/nodejs
      # - image: circleci/node:lts-jessie
    steps:
      - checkout
      # TODO: Cache Google Cloud SDK
      # - run:
      #     name: Install Google Cloud SDK
      #     command: |
      #       curl -o google-cloud-sdk.tar.gz https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-290.0.1-linux-x86_64.tar.gz
      #       tar -xzf google-cloud-sdk.tar.gz
      #       ./google-cloud-sdk/install.sh -q
      - run:
          name: Install yarn
          command: curl -o- -L https://yarnpkg.com/install.sh | bash
      - restore_cache:
          name: Restore yarn packages from cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Check node version
          command: node -v
      - run:
          name: Install dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save yarn packages to cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: "Build release"
          # Build staging release
          # TODO: This needs to be pulled into a separate job & workflow so that
          #       we can run staging steps in the deploy-staging workflow and
          #       production steps in the deploy-production workflow.
          command: yarn build:staging
          # command: |
          #   ls -lah ./node_modules/ | grep env-cmd
          #   ./node_modules/.bin/env-cmd -f .env.staging npm run build
      - run:
          name: "Deploy build"
          command: |
            # Store service account
            echo ${GCLOUD_SERVICE_KEY} > ${HOME}/gcloud-service-key.json
            # Initialize gcloud CLI
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud app deploy --quiet <<parameters.Stack>>.yaml <<parameters.NoPromote>> <<parameters.Version>>
workflows:
  version: 2
  deploy-gcloud:
    jobs:
      - deploy:
          filters:
            branches:
              only: circleci-setup